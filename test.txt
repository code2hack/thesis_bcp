分层存储其实已经不是一个新鲜的概念，而是已经在计算机存储领域应用多年。其与计算机的发明与发展相伴相生。在冯－诺依曼提出计算机的模型“存储程序”时就已经包含了分层存储的概念。“存储程序”原理，是将根据特定问题编写的程序存放在计算机存储器中，然后按存储器中的存储程序的首地址执行程序的第一条指令，以后就按照该程序的规定顺序执行其他指令，直至程序结束执行。在这里的外存储器与内存储器，就是一个分层存储的最初模型。
分层存储（Tiered Storage），也称为层级存储管理（Hierarchical Storage Management），广义上讲，就是将数据存储在不同层级的介质中，并在不同的介质之间进行自动或者手动的数据迁移，复制等操作。同时，分层存储也是信息生命周期管理的一个具体应用和实现。
而实际上，将相同成本及效率的存储介质放在不同层级之间进行数据迁移复制在实用性及成本上并不是有效的数据存储方式。因此，在不同的层级之间使用有差别的存储介质，以期在相同成本下，既满足性能的需要又满足容量的需要。这种存储介质上的差别主要是在存取速度上及容量上。存取速度快的介质通常都是存储单位成本（每单位存储容量成本，如1元/GB）高，而且容量相对来讲比较低。相应的，存取速度慢的介质通常是为了满足容量与成本方面的要求，既在相同的成本下可以得到更大的容量。所以，从这方面来说，分层存储其实是一种在高速小容量层级的介质层与低速大容量层级的介质层之间进行一种自动或者手动数据迁移、复制、管理等操作的一种存储技术及方案。
一般来说，分层存储中，我们将存取速度最快的那一层的介质层称为第0层（Tier 0），依次为第1层，第2层等等。理论上说，层级的划分可以有很多层，但是在实践中，最多的层级在5层左右。过多的层级会增加数据及介质管理的难道及可用性。因此在层级的设置上有一个拐点，即层级达到一个特定的层数时，会导致成本的上升，而使得可用性、可靠性都会相应下降。通常层级的设定在2－4层之间。如下图所示：

为什么需要分层存储
在计算机系统中，CPU 的运行速度往往要比内存速度快上好几百倍甚至更多，为了更多地榨取CPU的计算能力，就需要在访问数据的速度上进行提升，否则内存的速度将成为整个系统的性能短板。因此在这样的思想下，CPU慢慢发展出来1级或者2级这样的存储缓存。实际也表明，缓存的存在确实对于系统性能的提升起到了巨大的推动作用。
相应的，内存的访问速度又是硬盘访问速度的几百倍甚至更多，也是基于CPU类似的指导思想，我们能不能在存储之间也进行这样的分层（或者说缓存）以期提高系统的I/O性能，以满足应用对系统提出的更多高I/O的需求呢？
从某种意义上说，内存其实也就是充当了CPU与外部存储之间的另一个级别的缓存。作为用户来讲，我们当然希望所有需要用到的数据都最好是存在最高速的存储当中。但是这样近乎是乌托邦式的理想至少在当前来说是不现实的。在技术上的难度不说，成本的压力就会使得用户喘不过气来，再一个就是有没有必要的问题，因为有的数据根本都不需要一直存于这样的存储中。在计算机界中有一个很有名的理论，就是说，加上一个中间层，就可以解决计算机中许多的问题。而这个“中间层”也正是我们所寻求的，实际也证明这样的中间层确实取得了非常好的效果。
除了需要满足不同的存储需求，还有出于对于高性能高吞吐量应用的支持。因为有的应用需要这样存储系统。特别是现在风头正劲的虚拟化技术。为了在一台设备上支持更多的虚拟应用，就需要系统支持更大的吞吐量以及更高的性能。全部采用高速介质在成本上现在依然不是可行的，也不是必须的。因为根据数据局部性原理，往往被频繁访问的数据是局部而有限的。为了应对部份这样的数据而全采用高速存储实在是过于奢侈。如果我们针对这部份数据另开小灶来解决不是更好？所以分层存储在这里就可以大展拳脚。我们把高频率访问的数据放在高速存储介质上，而其他的数据放在速度较慢一些的介质上，这实际上就是提高了系统的吞吐量。
分层存储介质的分类
从计算机系统角度来说 ，最上层的存储层应该是CPU内的各类型寄存器，其次是CPU内的缓存，其次再是系统内存。因为从分层存储的定义上，此类型存储器是符合定义规则的。
因为这些存储器速度与容量都有差别，越靠近CPU的存储器成本越高，速度越快，容量越小，并且在CPU的控制下，数据这些不同类型的存储器中间进行自动的转存。 比如寄存器通常在16、32、64、128位之间，而缓存则在几十个字节及到几兆字节之间，内存容量当前通常都在几百兆字节以上，服务器级的内存也上几十个吉字节。很有意思的是，这类型的分层也非常符合上图所示的效益成本曲线图。层级过多时，对于CPU的硬件设计及不同层次之间的数据一致性的保证都是一个挑战。所以，现代CPU在寄存器与内存之间的缓存基本在1-3级。而我们通常使用的386平台的CPU（Intel 及 AMD）基本上都只有两级缓存。 这类存储都有一个共同的特点，就是系统掉电后数据不复存在。我们将此类型的分层存储称为易失性存储分层，或者内部存储器分层存储。
而另外一种分类，则是非易失性分层存储，或者叫外部分层存储。此类型的存储介质一般包括固态硬盘（SSD）、机械式硬盘、光盘、闪存盘（包括外置硬盘）、磁带库等等。而此类的存储介质分层正是我们所要关注的， 如没有特殊的说明情况下，在此文档中所说的分层存储都是指外部分层存储。一般来说，
作为第0层的存储介质通常为 RAM 磁盘（随机访问存储磁盘，其速度与内存同速，但是价格昂贵，使用环境基本上是特殊计算环境）以及 SSD，第1层可能有 FC 15K硬盘或者SAS 15K硬盘，或者相应的10K硬盘。第2层可能有其他类型的硬盘及磁盘库等。第3层，可能是如磁带库以及光盘库这样的离线介质。当然这样的分层不是标准，但是一个实践中常用的分层策略。
如 D2D2T 这样的存储方案，其实就是分层存储的一个实践方案。数据从本地的磁盘转存于于另一个远程的磁盘（D2D）。这个磁盘的形式可以是一个JBOD，或者一个虚拟存储设备，然后再通过一定的转存策略将这个磁盘的数据转存于磁带库或者磁带（D2T）。爱数备份存储柜X系列都支持D2D2T这样的应用。
分层存储需要考虑的问题
由上一节可知道，外部分层存储只不过是内部分层存储的一个外延。所以，外部分层存储考虑的问题与内部分层存储实际上是大同小异的。
1、    首先是数据一致性的问题。这个问题比较好理解。如果不同的数据在不同的存储层级之间存在时，数据的改写必然导致数据的不致的问题。在内部分层存储时，可以采用通写策略或者回写策略。而不同的方法也有各自优缺点，这里就不再赘述。 但是外部分层存储与内部分层存储有一个最大的不同是，内存储最终数据需要写到内存中，而外分层存储中，则不是必须的。当然也可以设计成这样的实现方案，但是这样话，分层存储的性能优势则必定会受到影响。数据在不同层级之间的连续性可以由一个虚拟层来保证。这个我们在谈到虚拟化时会讨论这个问题。
2、    第二个问题就是命中率的问题。如何设计一套算法或者实现策略来提高数据系统的命中率是分层存储中是否能起到其相应作用的关键。这个与CPU的缓存机制是完全一样的。不过，CPU的缓存机制已经有一套非常成熟的算法设计。而外部分层存储与内部分层存储有其不同的特性，因此，CPU中的缓存机制不能全部照拿过来用。特别是CPU的缓存机制还主要是硬件设计上面的问题。而外部存储层可能还与一些逻辑设计相关，比如文件系统，文件等。从这点上说，外部分层存储的软件设计上比起CPU缓存的设计可能要更复杂一些。
3、    第三个问题就是在分层介质的选择上。上面也提过，不同层级之间的介质应该是有差别的，否则就失去了分层的意义。一般来说，高速介质应该是小容量、高成本，随着层级的往下走，其成本容量曲线应该呈现如下的形式：

即容量越大的单位成本越低，速度越慢，因此应该放到更低的层级中，反之亦然。因此，在存储介质的配置上如何找到一个合适的点，使得成本与效益最优化则是在分层介质选择及策略制定上需要考虑的问题。下面的图中给出了一个实际的可能的配置方案：


1、    第四个问题就是数据分层的级别。对于数据的描述有字节级，块级（包括扇区 及簇），文件级及文件系统级。当然不同的级别有不同的应用场合，并不是哪种级别好于哪个级别。对于文件级的分层，对于归档，法规遵从则比较适合。对于文件系统级的则多用于 容灾 及备份系统中。对于块级则可能用在虚拟化中较为合适。因此需要根据不同的需求制定不同的分层级别。
2、    第五个问题就是数据的迁移策略的设计。可以根据数据的重要性、访问频度、大小、年龄来制定迁移策略。但是如同第四点所说明的那样，不同的策略是有不同的应用场合的，没有孰优孰劣的问题。好的策略应该是不同最优策略的组合，也就是因“需”制宜地选择合适的迁移算法或者方法。根据年龄进行迁移的策略可以用在归档及容灾备份系统中。根据访问频度则可以用于虚拟化存储系统中等等。类似的方法已经用于计算机软件设计或者硬件设计当中的很多地方，如LRU（最近最少使用）、ARC（自适应交替缓存）都是可以借鉴的

什么是分层存储
分层存储其实已经不是一个新鲜的概念，而是已经在计算机存储领域应用多年。其与计算机的发明与发展相伴相生。在冯－诺依曼提出计算机的模型“存储程序”时就已经包含了分层存储的概念。“存储程序”原理，是将根据特定问题编写的程序存放在计算机存储器中，然后按存储器中的存储程序的首地址执行程序的第一条指令，以后就按照该程序的规定顺序执行其他指令，直至程序结束执行。在这里的外存储器与内存储器，就是一个分层存储的最初模型。
分层存储（Tiered Storage），也称为层级存储管理（Hierarchical Storage Management），广义上讲，就是将数据存储在不同层级的介质中，并在不同的介质之间进行自动或者手动的数据迁移，复制等操作。同时，分层存储也是信息生命周期管理的一个具体应用和实现。
而实际上，将相同成本及效率的存储介质放在不同层级之间进行数据迁移复制在实用性及成本上并不是有效的数据存储方式。因此，在不同的层级之间使用有差别的存储介质，以期在相同成本下，既满足性能的需要又满足容量的需要。这种存储介质上的差别主要是在存取速度上及容量上。存取速度快的介质通常都是存储单位成本（每单位存储容量成本，如1元/GB）高，而且容量相对来讲比较低。相应的，存取速度慢的介质通常是为了满足容量与成本方面的要求，既在相同的成本下可以得到更大的容量。所以，从这方面来说，分层存储其实是一种在高速小容量层级的介质层与低速大容量层级的介质层之间进行一种自动或者手动数据迁移、复制、管理等操作的一种存储技术及方案。
一般来说，分层存储中，我们将存取速度最快的那一层的介质层称为第0层（Tier 0），依次为第1层，第2层等等。理论上说，层级的划分可以有很多层，但是在实践中，最多的层级在5层左右。过多的层级会增加数据及介质管理的难道及可用性。因此在层级的设置上有一个拐点，即层级达到一个特定的层数时，会导致成本的上升，而使得可用性、可靠性都会相应下降。通常层级的设定在2－4层之间。如下图所示：

为什么需要分层存储
在计算机系统中，CPU 的运行速度往往要比内存速度快上好几百倍甚至更多，为了更多地榨取CPU的计算能力，就需要在访问数据的速度上进行提升，否则内存的速度将成为整个系统的性能短板。因此在这样的思想下，CPU慢慢发展出来1级或者2级这样的存储缓存。实际也表明，缓存的存在确实对于系统性能的提升起到了巨大的推动作用。
相应的，内存的访问速度又是硬盘访问速度的几百倍甚至更多，也是基于CPU类似的指导思想，我们能不能在存储之间也进行这样的分层（或者说缓存）以期提高系统的I/O性能，以满足应用对系统提出的更多高I/O的需求呢？
从某种意义上说，内存其实也就是充当了CPU与外部存储之间的另一个级别的缓存。作为用户来讲，我们当然希望所有需要用到的数据都最好是存在最高速的存储当中。但是这样近乎是乌托邦式的理想至少在当前来说是不现实的。在技术上的难度不说，成本的压力就会使得用户喘不过气来，再一个就是有没有必要的问题，因为有的数据根本都不需要一直存于这样的存储中。在计算机界中有一个很有名的理论，就是说，加上一个中间层，就可以解决计算机中许多的问题。而这个“中间层”也正是我们所寻求的，实际也证明这样的中间层确实取得了非常好的效果。
除了需要满足不同的存储需求，还有出于对于高性能高吞吐量应用的支持。因为有的应用需要这样存储系统。特别是现在风头正劲的虚拟化技术。为了在一台设备上支持更多的虚拟应用，就需要系统支持更大的吞吐量以及更高的性能。全部采用高速介质在成本上现在依然不是可行的，也不是必须的。因为根据数据局部性原理，往往被频繁访问的数据是局部而有限的。为了应对部份这样的数据而全采用高速存储实在是过于奢侈。如果我们针对这部份数据另开小灶来解决不是更好？所以分层存储在这里就可以大展拳脚。我们把高频率访问的数据放在高速存储介质上，而其他的数据放在速度较慢一些的介质上，这实际上就是提高了系统的吞吐量。
分层存储介质的分类
从计算机系统角度来说 ，最上层的存储层应该是CPU内的各类型寄存器，其次是CPU内的缓存，其次再是系统内存。因为从分层存储的定义上，此类型存储器是符合定义规则的。
因为这些存储器速度与容量都有差别，越靠近CPU的存储器成本越高，速度越快，容量越小，并且在CPU的控制下，数据这些不同类型的存储器中间进行自动的转存。 比如寄存器通常在16、32、64、128位之间，而缓存则在几十个字节及到几兆字节之间，内存容量当前通常都在几百兆字节以上，服务器级的内存也上几十个吉字节。很有意思的是，这类型的分层也非常符合上图所示的效益成本曲线图。层级过多时，对于CPU的硬件设计及不同层次之间的数据一致性的保证都是一个挑战。所以，现代CPU在寄存器与内存之间的缓存基本在1-3级。而我们通常使用的386平台的CPU（Intel 及 AMD）基本上都只有两级缓存。 这类存储都有一个共同的特点，就是系统掉电后数据不复存在。我们将此类型的分层存储称为易失性存储分层，或者内部存储器分层存储。
而另外一种分类，则是非易失性分层存储，或者叫外部分层存储。此类型的存储介质一般包括固态硬盘（SSD）、机械式硬盘、光盘、闪存盘（包括外置硬盘）、磁带库等等。而此类的存储介质分层正是我们所要关注的， 如没有特殊的说明情况下，在此文档中所说的分层存储都是指外部分层存储。一般来说，
作为第0层的存储介质通常为 RAM 磁盘（随机访问存储磁盘，其速度与内存同速，但是价格昂贵，使用环境基本上是特殊计算环境）以及 SSD，第1层可能有 FC 15K硬盘或者SAS 15K硬盘，或者相应的10K硬盘。第2层可能有其他类型的硬盘及磁盘库等。第3层，可能是如磁带库以及光盘库这样的离线介质。当然这样的分层不是标准，但是一个实践中常用的分层策略。
如 D2D2T 这样的存储方案，其实就是分层存储的一个实践方案。数据从本地的磁盘转存于于另一个远程的磁盘（D2D）。这个磁盘的形式可以是一个JBOD，或者一个虚拟存储设备，然后再通过一定的转存策略将这个磁盘的数据转存于磁带库或者磁带（D2T）。爱数备份存储柜X系列都支持D2D2T这样的应用。
分层存储需要考虑的问题
由上一节可知道，外部分层存储只不过是内部分层存储的一个外延。所以，外部分层存储考虑的问题与内部分层存储实际上是大同小异的。
1、    首先是数据一致性的问题。这个问题比较好理解。如果不同的数据在不同的存储层级之间存在时，数据的改写必然导致数据的不致的问题。在内部分层存储时，可以采用通写策略或者回写策略。而不同的方法也有各自优缺点，这里就不再赘述。 但是外部分层存储与内部分层存储有一个最大的不同是，内存储最终数据需要写到内存中，而外分层存储中，则不是必须的。当然也可以设计成这样的实现方案，但是这样话，分层存储的性能优势则必定会受到影响。数据在不同层级之间的连续性可以由一个虚拟层来保证。这个我们在谈到虚拟化时会讨论这个问题。
2、    第二个问题就是命中率的问题。如何设计一套算法或者实现策略来提高数据系统的命中率是分层存储中是否能起到其相应作用的关键。这个与CPU的缓存机制是完全一样的。不过，CPU的缓存机制已经有一套非常成熟的算法设计。而外部分层存储与内部分层存储有其不同的特性，因此，CPU中的缓存机制不能全部照拿过来用。特别是CPU的缓存机制还主要是硬件设计上面的问题。而外部存储层可能还与一些逻辑设计相关，比如文件系统，文件等。从这点上说，外部分层存储的软件设计上比起CPU缓存的设计可能要更复杂一些。
3、    第三个问题就是在分层介质的选择上。上面也提过，不同层级之间的介质应该是有差别的，否则就失去了分层的意义。一般来说，高速介质应该是小容量、高成本，随着层级的往下走，其成本容量曲线应该呈现如下的形式：

即容量越大的单位成本越低，速度越慢，因此应该放到更低的层级中，反之亦然。因此，在存储介质的配置上如何找到一个合适的点，使得成本与效益最优化则是在分层介质选择及策略制定上需要考虑的问题。下面的图中给出了一个实际的可能的配置方案：


1、    第四个问题就是数据分层的级别。对于数据的描述有字节级，块级（包括扇区 及簇），文件级及文件系统级。当然不同的级别有不同的应用场合，并不是哪种级别好于哪个级别。对于文件级的分层，对于归档，法规遵从则比较适合。对于文件系统级的则多用于 容灾 及备份系统中。对于块级则可能用在虚拟化中较为合适。因此需要根据不同的需求制定不同的分层级别。
2、    第五个问题就是数据的迁移策略的设计。可以根据数据的重要性、访问频度、大小、年龄来制定迁移策略。但是如同第四点所说明的那样，不同的策略是有不同的应用场合的，没有孰优孰劣的问题。好的策略应该是不同最优策略的组合，也就是因“需”制宜地选择合适的迁移算法或者方法。根据年龄进行迁移的策略可以用在归档及容灾备份系统中。根据访问频度则可以用于虚拟化存储系统中等等。类似的方法已经用于计算机软件设计或者硬件设计当中的很多地方，如LRU（最近最少使用）、ARC（自适应交替缓存）都是可以借鉴的
